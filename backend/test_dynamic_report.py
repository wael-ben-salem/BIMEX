"""
Test du rapport dynamique avec recommandations intelligentes
"""

import requests
import json
import time
import logging
import re

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def test_generate_html_report():
    """Test de g√©n√©ration du rapport HTML dynamique"""
    logger.info("üß™ Test de g√©n√©ration du rapport HTML dynamique")
    
    try:
        # G√©n√©rer le rapport HTML pour basic2
        logger.info("üìä G√©n√©ration du rapport HTML...")
        response = requests.get(
            "http://localhost:8000/generate-html-report?project=basic2&auto=true&file_detected=true",
            timeout=60
        )
        
        if response.status_code == 200:
            data = response.json()
            
            if data.get('success'):
                report_id = data.get('report_id')
                report_url = data.get('report_url')
                
                logger.info(f"‚úÖ Rapport g√©n√©r√© avec succ√®s")
                logger.info(f"   üìã ID: {report_id}")
                logger.info(f"   üîó URL: {report_url}")
                
                return report_id, report_url
            else:
                logger.error(f"‚ùå Erreur g√©n√©ration: {data}")
                return None, None
        else:
            logger.error(f"‚ùå Erreur HTTP: {response.status_code}")
            return None, None
            
    except Exception as e:
        logger.error(f"‚ùå Erreur test g√©n√©ration: {e}")
        return None, None

def test_view_dynamic_report(report_id):
    """Test de visualisation du rapport avec recommandations dynamiques"""
    logger.info("üß™ Test de visualisation du rapport dynamique")
    
    try:
        # Acc√©der au rapport HTML
        logger.info(f"üìÑ Acc√®s au rapport {report_id}...")
        response = requests.get(
            f"http://localhost:8000/report-view/{report_id}",
            timeout=30
        )
        
        if response.status_code == 200:
            html_content = response.text
            logger.info("‚úÖ Rapport HTML accessible")
            
            # Analyser le contenu HTML pour v√©rifier les recommandations dynamiques
            return analyze_report_content(html_content)
        else:
            logger.error(f"‚ùå Erreur acc√®s rapport: {response.status_code}")
            return False
            
    except Exception as e:
        logger.error(f"‚ùå Erreur test visualisation: {e}")
        return False

def analyze_report_content(html_content):
    """Analyse le contenu HTML pour v√©rifier les recommandations dynamiques"""
    logger.info("üîç Analyse du contenu du rapport")
    
    # V√©rifications sp√©cifiques pour les recommandations dynamiques
    checks = {
        "section_recommendations": "Recommandations Intelligentes" in html_content,
        "dynamic_template": "{% if recommendations %}" in html_content or "recommendations" in html_content,
        "no_static_values": "Traiter les 0 anomalies" not in html_content,
        "critical_anomalies": "CRITIQUE" in html_content or "critiques" in html_content,
        "pmr_recommendations": "PMR" in html_content and "Accessibilit√©" in html_content,
        "window_ratio": "fen√™tres" in html_content or "√©clairage" in html_content,
    }
    
    # Rechercher des patterns sp√©cifiques
    patterns = {
        "priority_1": r"Priorit√© 1.*URGENT",
        "priority_2": r"Priorit√© 2",
        "pmr_percentage": r"PMR.*\d+\.\d+%",
        "anomalies_count": r"\d+.*anomalie",
        "window_ratio_percent": r"\d+\.\d+%.*fen√™tres",
    }
    
    pattern_matches = {}
    for pattern_name, pattern in patterns.items():
        matches = re.findall(pattern, html_content, re.IGNORECASE)
        pattern_matches[pattern_name] = len(matches) > 0
        if matches:
            logger.info(f"   ‚úÖ {pattern_name}: {matches[0][:50]}...")
    
    # V√©rifications d√©taill√©es
    logger.info("üìä R√©sultats des v√©rifications:")
    for check_name, check_result in checks.items():
        status = "‚úÖ" if check_result else "‚ùå"
        logger.info(f"   {status} {check_name}: {'OK' if check_result else '√âCHEC'}")
    
    logger.info("üîç Patterns d√©tect√©s:")
    for pattern_name, pattern_found in pattern_matches.items():
        status = "‚úÖ" if pattern_found else "‚ùå"
        logger.info(f"   {status} {pattern_name}: {'Trouv√©' if pattern_found else 'Non trouv√©'}")
    
    # Rechercher des valeurs statiques probl√©matiques
    problematic_patterns = [
        "Traiter les 0 anomalies",
        "Corriger les 1 non-conformit√©s",
        "{{ high_anomalies | default",
    ]
    
    problems_found = []
    for problem in problematic_patterns:
        if problem in html_content:
            problems_found.append(problem)
    
    if problems_found:
        logger.error("üö® Valeurs statiques d√©tect√©es:")
        for problem in problems_found:
            logger.error(f"   ‚ùå {problem}")
    else:
        logger.info("‚úÖ Aucune valeur statique probl√©matique d√©tect√©e")
    
    # Score global
    total_checks = len(checks) + len(pattern_matches)
    passed_checks = sum(checks.values()) + sum(pattern_matches.values())
    success_rate = (passed_checks / total_checks) * 100
    
    logger.info(f"üìä Score global: {passed_checks}/{total_checks} ({success_rate:.1f}%)")
    
    return success_rate > 70  # Succ√®s si plus de 70% des v√©rifications passent

def test_specific_recommendations():
    """Test des recommandations sp√©cifiques attendues pour basic2"""
    logger.info("üß™ Test des recommandations sp√©cifiques pour basic2")
    
    # Donn√©es attendues pour basic2
    expected_data = {
        "critical_anomalies": 23,
        "high_anomalies": 0,
        "medium_anomalies": 72,
        "low_anomalies": 129,
        "pmr_compliance": 61.5,
        "window_ratio": 15.6,  # 15.6%
        "total_anomalies": 224
    }
    
    # Recommandations attendues
    expected_recommendations = [
        f"Traiter les {expected_data['critical_anomalies']} anomalie(s) de s√©v√©rit√© CRITIQUE",
        "Aucune anomalie critique ou √©lev√©e" if expected_data['high_anomalies'] == 0 else f"Traiter les {expected_data['high_anomalies']} anomalie(s) √©lev√©e",
        f"{expected_data['medium_anomalies']} anomalies moyennes d√©tect√©es",
        f"Conformit√©.*{expected_data['pmr_compliance']:.1f}%",
        f"Ratio fen√™tres/murs.*{expected_data['window_ratio']:.1f}%"
    ]
    
    logger.info("üìã Recommandations attendues pour basic2:")
    for i, rec in enumerate(expected_recommendations, 1):
        logger.info(f"   {i}. {rec}")
    
    return expected_recommendations

def main():
    """Test principal du rapport dynamique"""
    logger.info("üöÄ Tests du Rapport Dynamique avec Recommandations Intelligentes")
    
    # Test 1: G√©n√©ration du rapport
    logger.info(f"\n{'='*60}")
    logger.info("TEST 1: G√âN√âRATION RAPPORT HTML")
    logger.info(f"{'='*60}")
    report_id, report_url = test_generate_html_report()
    
    if not report_id:
        logger.error("‚ùå G√©n√©ration du rapport √©chou√©e - Tests interrompus")
        return
    
    # Attendre un peu pour que le rapport soit pr√™t
    time.sleep(2)
    
    # Test 2: Visualisation et analyse
    logger.info(f"\n{'='*60}")
    logger.info("TEST 2: ANALYSE CONTENU DYNAMIQUE")
    logger.info(f"{'='*60}")
    content_valid = test_view_dynamic_report(report_id)
    
    # Test 3: Recommandations sp√©cifiques
    logger.info(f"\n{'='*60}")
    logger.info("TEST 3: RECOMMANDATIONS SP√âCIFIQUES")
    logger.info(f"{'='*60}")
    expected_recommendations = test_specific_recommendations()
    
    # R√©sum√© final
    logger.info(f"\n{'='*60}")
    logger.info("üìä R√âSUM√â DES TESTS")
    logger.info(f"{'='*60}")
    
    if report_id:
        logger.info("‚úÖ TEST 1: G√©n√©ration du rapport r√©ussie")
        logger.info(f"   üîó URL: http://localhost:8000{report_url}")
    else:
        logger.error("‚ùå TEST 1: G√©n√©ration du rapport √©chou√©e")
    
    if content_valid:
        logger.info("‚úÖ TEST 2: Contenu dynamique valid√©")
    else:
        logger.error("‚ùå TEST 2: Probl√®mes dans le contenu dynamique")
    
    logger.info("‚úÖ TEST 3: Recommandations sp√©cifiques d√©finies")
    
    # Instructions d'utilisation
    logger.info(f"\n{'='*60}")
    logger.info("üí° INSTRUCTIONS DE V√âRIFICATION MANUELLE")
    logger.info(f"{'='*60}")
    
    if report_id:
        logger.info("üéØ Pour v√©rifier les corrections:")
        logger.info(f"   1. Ouvrir: http://localhost:8000/report-view/{report_id}")
        logger.info("   2. Aller √† la section 'Recommandations Intelligentes'")
        logger.info("   3. V√©rifier les recommandations attendues:")
        logger.info("      ‚úÖ '23 anomalie(s) de s√©v√©rit√© CRITIQUE' (pas 0)")
        logger.info("      ‚úÖ 'Aucune anomalie √©lev√©e' (0 √©lev√©es)")
        logger.info("      ‚úÖ '72 anomalies moyennes d√©tect√©es'")
        logger.info("      ‚úÖ 'Conformit√© PMR 61.5%' (pas 1 non-conformit√©)")
        logger.info("      ‚úÖ 'Ratio fen√™tres/murs 15.6%'")
        logger.info("   4. V√©rifier l'absence de:")
        logger.info("      ‚ùå 'Traiter les 0 anomalies √©lev√©es'")
        logger.info("      ‚ùå 'Corriger les 1 non-conformit√©s PMR'")
        logger.info("      ‚ùå Valeurs statiques cod√©es en dur")
    
    logger.info("üîÑ Comparaison AVANT/APR√àS:")
    logger.info("   AVANT: 'Traiter les 0 anomalies √©lev√©es' (statique)")
    logger.info("   APR√àS: 'Traiter les 23 anomalies CRITIQUES' (dynamique)")
    logger.info("")
    logger.info("   AVANT: 'Corriger les 1 non-conformit√©s PMR' (statique)")
    logger.info("   APR√àS: 'Conformit√© PMR 61.5% - Corriger X non-conformit√©s' (dynamique)")
    
    logger.info("üéâ Tests termin√©s!")

if __name__ == "__main__":
    main()
