"""
Test final des corrections apport√©es aux probl√®mes identifi√©s
"""

import requests
import logging
from pathlib import Path

# Configuration du logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def test_comprehensive_analysis():
    """Test de l'analyse compl√®te corrig√©e"""
    logger.info("üß™ Test de l'analyse compl√®te")
    
    try:
        response = requests.get("http://localhost:8000/analyze-comprehensive-project/basic2", timeout=30)
        
        if response.status_code == 200:
            data = response.json()
            if data.get('status') == 'success':
                analysis = data.get('analysis', {})
                results = analysis.get('analysis_results', {})
                
                # V√©rifier que les erreurs sont corrig√©es
                metrics_status = results.get('metrics', {}).get('status')
                anomalies_status = results.get('anomalies', {}).get('status')
                classification_status = results.get('classification', {}).get('status')
                pmr_status = results.get('pmr', {}).get('status')
                
                logger.info(f"üìä M√©triques: {metrics_status}")
                logger.info(f"üö® Anomalies: {anomalies_status}")
                logger.info(f"üè¢ Classification: {classification_status}")
                logger.info(f"‚ôø PMR: {pmr_status}")
                
                if metrics_status == 'success' and anomalies_status == 'success':
                    logger.info("‚úÖ Erreurs 'analyze_ifc_file' et 'detect_anomalies' corrig√©es!")
                    return True
                else:
                    logger.error("‚ùå Erreurs encore pr√©sentes")
                    return False
            else:
                logger.error(f"‚ùå Analyse √©chou√©e: {data}")
                return False
        else:
            logger.error(f"‚ùå Status {response.status_code}")
            return False
            
    except requests.exceptions.ConnectionError:
        logger.warning("‚ö†Ô∏è Backend non accessible")
        return None
    except Exception as e:
        logger.error(f"‚ùå Erreur: {e}")
        return False

def test_building_classification():
    """Test de la classification du b√¢timent corrig√©e"""
    logger.info("üß™ Test de la classification du b√¢timent")
    
    try:
        response = requests.get("http://localhost:8000/classify-building-project/basic2", timeout=15)
        
        if response.status_code == 200:
            data = response.json()
            note = data.get('note', '')
            classification = data.get('classification', {})
            
            logger.info(f"üìù Note: {note}")
            
            if 'Classification compl√®te disponible apr√®s entra√Ænement' in note:
                logger.error("‚ùå Note d'entra√Ænement encore pr√©sente")
                return False
            elif 'Classification IA termin√©e' in note or classification:
                logger.info("‚úÖ Classification IA fonctionnelle!")
                if classification:
                    building_type = classification.get('building_type', 'Non d√©fini')
                    confidence = classification.get('confidence', 0) * 100
                    logger.info(f"üèóÔ∏è Type: {building_type} (Confiance: {confidence:.1f}%)")
                return True
            else:
                logger.warning("‚ö†Ô∏è Classification de base seulement")
                return False
        else:
            logger.error(f"‚ùå Status {response.status_code}")
            return False
            
    except requests.exceptions.ConnectionError:
        logger.warning("‚ö†Ô∏è Backend non accessible")
        return None
    except Exception as e:
        logger.error(f"‚ùå Erreur: {e}")
        return False

def test_frontend_auto_mode():
    """Test du mode automatique du frontend"""
    logger.info("üß™ Test du mode automatique frontend")
    
    try:
        # Tester l'URL d'analyse automatique
        url = "http://localhost:8000/analysis?project=basic2&auto=true&file_detected=true&step=detailed"
        response = requests.get(url, timeout=10)
        
        if response.status_code == 200:
            content = response.text
            
            # V√©rifications du contenu
            checks = [
                ("configureAutoMode", "Fonction de configuration auto pr√©sente"),
                ("currentFile", "Variable currentFile pr√©sente"),
                ("analyze-comprehensive-project", "Route d'analyse compl√®te r√©f√©renc√©e"),
                ("basic2", "Projet basic2 d√©tect√©"),
            ]
            
            all_good = True
            for check, description in checks:
                if check.lower() in content.lower():
                    logger.info(f"‚úÖ {description}")
                else:
                    logger.error(f"‚ùå {description}")
                    all_good = False
            
            return all_good
        else:
            logger.error(f"‚ùå Page d'analyse retourne status {response.status_code}")
            return False
            
    except requests.exceptions.ConnectionError:
        logger.warning("‚ö†Ô∏è Backend non accessible")
        return None
    except Exception as e:
        logger.error(f"‚ùå Erreur: {e}")
        return False

def test_list_files_api():
    """Test de l'API list-files utilis√©e par le frontend"""
    logger.info("üß™ Test de l'API list-files")
    
    try:
        response = requests.get("http://localhost:8000/list-files", timeout=10)
        
        if response.status_code == 200:
            files = response.json()
            
            # Chercher des fichiers pour basic2
            basic2_files = [f for f in files if 'basic2' in f.get('name', '').lower() or 'basic2' in f.get('path', '').lower()]
            
            if basic2_files:
                logger.info(f"‚úÖ {len(basic2_files)} fichier(s) trouv√©(s) pour basic2:")
                for file in basic2_files[:3]:  # Afficher les 3 premiers
                    logger.info(f"   üìÅ {file.get('name')} ({file.get('type')})")
                return True
            else:
                logger.warning("‚ö†Ô∏è Aucun fichier trouv√© pour basic2")
                return False
        else:
            logger.error(f"‚ùå API list-files retourne status {response.status_code}")
            return False
            
    except requests.exceptions.ConnectionError:
        logger.warning("‚ö†Ô∏è Backend non accessible")
        return None
    except Exception as e:
        logger.error(f"‚ùå Erreur: {e}")
        return False

def run_all_correction_tests():
    """Ex√©cuter tous les tests de correction"""
    logger.info("üöÄ Tests des corrections appliqu√©es")
    
    tests = [
        ("Analyse compl√®te", test_comprehensive_analysis),
        ("Classification b√¢timent", test_building_classification),
        ("Mode automatique frontend", test_frontend_auto_mode),
        ("API list-files", test_list_files_api)
    ]
    
    results = {}
    
    for test_name, test_func in tests:
        logger.info(f"\n{'='*50}")
        logger.info(f"TEST: {test_name.upper()}")
        logger.info(f"{'='*50}")
        result = test_func()
        results[test_name] = result
        
        if result is True:
            logger.info(f"‚úÖ {test_name}: SUCC√àS")
        elif result is False:
            logger.error(f"‚ùå {test_name}: √âCHEC")
        else:
            logger.warning(f"‚ö†Ô∏è {test_name}: NON TEST√â")
    
    # R√©sum√© final
    logger.info(f"\n{'='*50}")
    logger.info("üìä R√âSUM√â DES CORRECTIONS")
    logger.info(f"{'='*50}")
    
    success_count = sum(1 for r in results.values() if r is True)
    failure_count = sum(1 for r in results.values() if r is False)
    skipped_count = sum(1 for r in results.values() if r is None)
    
    logger.info(f"‚úÖ Corrections r√©ussies: {success_count}")
    logger.info(f"‚ùå Corrections √©chou√©es: {failure_count}")
    logger.info(f"‚ö†Ô∏è Non test√©es: {skipped_count}")
    
    if failure_count == 0 and success_count > 0:
        logger.info("üéâ TOUTES LES CORRECTIONS FONCTIONNENT!")
        logger.info("üîó URLs de test:")
        logger.info("   - Analyse: http://localhost:8000/analysis?project=basic2&auto=true&file_detected=true&step=detailed")
        logger.info("   - Classification: http://localhost:8000/classify-building-project/basic2")
        logger.info("   - Analyse compl√®te: http://localhost:8000/analyze-comprehensive-project/basic2")
    elif skipped_count == len(tests):
        logger.warning("‚ö†Ô∏è Backend non accessible - impossible de tester")
        logger.info("üí° D√©marrez le backend: python main.py")
    else:
        logger.warning(f"‚ö†Ô∏è {failure_count} correction(s) ont √©chou√©")
    
    return results

if __name__ == "__main__":
    results = run_all_correction_tests()
