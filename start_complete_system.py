#!/usr/bin/env python3
"""
üöÄ D√âMARRAGE COMPLET DU SYST√àME BI OPEN-SOURCE BIMEX
Lance tous les services et v√©rifie leur bon fonctionnement
"""

import os
import sys
import subprocess
import time
import requests
import webbrowser
from pathlib import Path
import threading

def print_banner():
    """Affiche la banni√®re de d√©marrage"""
    print("""
üöÄ SYST√àME BI OPEN-SOURCE BIMEX
================================
Apache Superset + IFC.js + n8n + ERPNext
    """)

def check_docker():
    """V√©rifie que Docker est disponible"""
    try:
        result = subprocess.run(["docker", "--version"], capture_output=True, text=True)
        if result.returncode == 0:
            print("‚úÖ Docker d√©tect√©")
            return True
        else:
            print("‚ùå Docker non disponible")
            return False
    except FileNotFoundError:
        print("‚ùå Docker non install√©")
        return False

def start_docker_services():
    """D√©marre les services Docker"""
    print("\nüì¶ D√©marrage des services Docker...")
    
    if not Path("docker-compose-bi.yml").exists():
        print("‚ö†Ô∏è Fichier docker-compose-bi.yml non trouv√©")
        print("Ex√©cutez d'abord: python setup_opensource_bi.py")
        return False
    
    try:
        # D√©marrer les services
        subprocess.run(["docker-compose", "-f", "docker-compose-bi.yml", "up", "-d"], 
                      check=True, capture_output=True)
        print("‚úÖ Services Docker d√©marr√©s")
        return True
    except subprocess.CalledProcessError as e:
        print(f"‚ùå Erreur d√©marrage Docker: {e}")
        return False

def wait_for_service(name, url, timeout=60):
    """Attend qu'un service soit disponible"""
    print(f"‚è≥ Attente du service {name}...")
    
    start_time = time.time()
    while time.time() - start_time < timeout:
        try:
            response = requests.get(url, timeout=5)
            if response.status_code in [200, 302]:
                print(f"‚úÖ {name} disponible")
                return True
        except:
            pass
        time.sleep(2)
    
    print(f"‚ö†Ô∏è {name} non disponible apr√®s {timeout}s")
    return False

def start_bimex_server():
    """D√©marre le serveur BIMEX BI"""
    print("\nüöÄ D√©marrage du serveur BIMEX BI...")
    
    if not Path("backend/main.py").exists():
        print("‚ùå Fichier backend/main.py non trouv√©")
        return None
    
    try:
        # Changer vers le r√©pertoire backend
        os.chdir("backend")
        
        # D√©marrer le serveur en arri√®re-plan
        process = subprocess.Popen([sys.executable, "main.py"], 
                                 stdout=subprocess.PIPE, 
                                 stderr=subprocess.PIPE)
        
        # Revenir au r√©pertoire racine
        os.chdir("..")
        
        # Attendre que le serveur d√©marre
        time.sleep(3)
        
        # V√©rifier que le serveur r√©pond
        try:
            response = requests.get("http://localhost:8000/health", timeout=5)
            if response.status_code == 200:
                print("‚úÖ Serveur BIMEX BI d√©marr√©")
                return process
            else:
                print("‚ö†Ô∏è Serveur BIMEX BI ne r√©pond pas correctement")
                return process
        except:
            print("‚ö†Ô∏è Serveur BIMEX BI en cours de d√©marrage...")
            return process
            
    except Exception as e:
        print(f"‚ùå Erreur d√©marrage serveur BIMEX: {e}")
        return None

def run_tests():
    """Lance les tests automatiques"""
    print("\nüß™ Lancement des tests automatiques...")
    
    try:
        result = subprocess.run([sys.executable, "test_opensource_bi.py"], 
                              capture_output=True, text=True, timeout=30)
        
        if result.returncode == 0:
            print("‚úÖ Tests r√©ussis")
            return True
        else:
            print("‚ö†Ô∏è Certains tests ont √©chou√©")
            print(result.stdout[-500:])  # Afficher les derni√®res lignes
            return False
            
    except subprocess.TimeoutExpired:
        print("‚ö†Ô∏è Tests interrompus (timeout)")
        return False
    except Exception as e:
        print(f"‚ùå Erreur lors des tests: {e}")
        return False

def open_browser_tabs():
    """Ouvre les onglets du navigateur"""
    print("\nüåê Ouverture des interfaces web...")
    
    urls = [
        ("BIMEX BI Dashboard", "http://localhost:8000/app/home.html"),
        ("Apache Superset", "http://localhost:8088"),
        ("n8n Workflows", "http://localhost:5678"),
        ("IFC.js Viewer", "http://localhost:3000"),
    ]
    
    for name, url in urls:
        try:
            webbrowser.open(url)
            print(f"‚úÖ {name} ouvert")
            time.sleep(1)  # √âviter d'ouvrir tous les onglets en m√™me temps
        except Exception as e:
            print(f"‚ö†Ô∏è Impossible d'ouvrir {name}: {e}")

def display_summary():
    """Affiche le r√©sum√© des services"""
    print("\n" + "="*60)
    print("üéâ SYST√àME BI OPEN-SOURCE D√âMARR√â !")
    print("="*60)
    
    services = [
        ("üöÄ BIMEX BI Dashboard", "http://localhost:8000/app/home.html", "Interface principale"),
        ("üìä Apache Superset", "http://localhost:8088", "admin/admin"),
        ("‚öôÔ∏è n8n Workflows", "http://localhost:5678", "admin/admin"),
        ("üèóÔ∏è IFC.js Viewer", "http://localhost:3000", "Upload IFC"),
        ("üè¢ ERPNext", "http://localhost:8000", "Gestion projet"),
    ]
    
    print("\nüåê SERVICES DISPONIBLES:")
    for name, url, info in services:
        print(f"  {name}")
        print(f"    URL: {url}")
        print(f"    Info: {info}")
        print()
    
    print("üìã PROCHAINES √âTAPES:")
    print("1. Cliquez sur le bouton BI flottant dans BIMEX")
    print("2. Testez les exports vers chaque plateforme")
    print("3. Configurez vos dashboards dans Superset")
    print("4. Cr√©ez vos workflows dans n8n")
    print("\nüìñ Consultez GUIDE_OPENSOURCE_BI.md pour plus d'infos")

def cleanup_on_exit(bimex_process):
    """Nettoie les processus √† la sortie"""
    print("\nüõë Arr√™t du syst√®me...")
    
    if bimex_process:
        bimex_process.terminate()
        print("‚úÖ Serveur BIMEX arr√™t√©")
    
    try:
        subprocess.run(["docker-compose", "-f", "docker-compose-bi.yml", "down"], 
                      capture_output=True)
        print("‚úÖ Services Docker arr√™t√©s")
    except:
        pass

def main():
    """Fonction principale"""
    print_banner()
    
    bimex_process = None
    
    try:
        # V√©rifications pr√©liminaires
        if not Path("backend/bi_config.json").exists():
            print("‚ùå Configuration BI non trouv√©e")
            print("Ex√©cutez d'abord: python setup_opensource_bi.py")
            return 1
        
        # D√©marrage des services Docker (optionnel)
        docker_available = check_docker()
        if docker_available:
            if not start_docker_services():
                print("‚ö†Ô∏è Erreur avec Docker, continuons sans les services externes")
            else:
                print("‚è≥ Attente du d√©marrage des services (30s)...")
                time.sleep(30)
                
                # V√©rifier les services
                services_to_check = [
                    ("Superset", "http://localhost:8088"),
                    ("n8n", "http://localhost:5678"),
                    ("IFC Viewer", "http://localhost:3000"),
                ]
                
                for name, url in services_to_check:
                    wait_for_service(name, url, timeout=30)
        
        # D√©marrage du serveur BIMEX
        bimex_process = start_bimex_server()
        if not bimex_process:
            print("‚ùå Impossible de d√©marrer le serveur BIMEX")
            return 1
        
        # Attendre que BIMEX soit pr√™t
        print("‚è≥ Attente du serveur BIMEX (10s)...")
        time.sleep(10)
        
        # Tests automatiques
        tests_passed = run_tests()
        
        # Ouverture du navigateur
        def delayed_browser_open():
            time.sleep(5)
            open_browser_tabs()
        
        browser_thread = threading.Thread(target=delayed_browser_open)
        browser_thread.daemon = True
        browser_thread.start()
        
        # Affichage du r√©sum√©
        display_summary()
        
        # Attendre l'interruption utilisateur
        print("\n‚å®Ô∏è Appuyez sur Ctrl+C pour arr√™ter le syst√®me")
        try:
            while True:
                time.sleep(1)
        except KeyboardInterrupt:
            pass
        
    except Exception as e:
        print(f"\n‚ùå Erreur inattendue: {e}")
        return 1
    
    finally:
        cleanup_on_exit(bimex_process)
    
    return 0

if __name__ == "__main__":
    sys.exit(main())
