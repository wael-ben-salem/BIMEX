#!/usr/bin/env python3
"""
üöÄ SCRIPT DE CONFIGURATION AUTOMATIQUE DU SYST√àME BI BIMEX
Configure automatiquement tout le syst√®me Business Intelligence
"""

import os
import json
import subprocess
import sys
from pathlib import Path
import shutil

def print_step(step, message):
    """Affiche une √©tape avec style"""
    print(f"\nüîß √âTAPE {step}: {message}")
    print("=" * 60)

def install_requirements():
    """Installe les d√©pendances Python n√©cessaires"""
    print_step(1, "INSTALLATION DES D√âPENDANCES")
    
    requirements = [
        "fastapi",
        "uvicorn",
        "python-multipart",
        "requests",
        "pandas",
        "python-dateutil",
        "aiofiles",
        "jinja2"
    ]
    
    for req in requirements:
        try:
            print(f"üì¶ Installation de {req}...")
            subprocess.check_call([sys.executable, "-m", "pip", "install", req])
            print(f"‚úÖ {req} install√© avec succ√®s")
        except subprocess.CalledProcessError:
            print(f"‚ö†Ô∏è Erreur installation {req} - continuons...")

def create_bi_config():
    """Cr√©e la configuration BI avec des endpoints de test"""
    print_step(2, "CR√âATION DE LA CONFIGURATION BI")
    
    config = {
        "connectors": [
            {
                "name": "PowerBI_Demo",
                "type": "powerbi",
                "endpoint": "https://api.powerbi.com/v1.0/myorg/datasets",
                "credentials": {
                    "client_id": "demo_client_id",
                    "client_secret": "demo_client_secret",
                    "tenant_id": "demo_tenant_id"
                },
                "active": True,
                "last_sync": None
            },
            {
                "name": "Tableau_Demo",
                "type": "tableau",
                "endpoint": "https://demo-tableau-server.com/api/3.0",
                "credentials": {
                    "username": "demo_user",
                    "password": "demo_password",
                    "site_id": "demo_site"
                },
                "active": True,
                "last_sync": None
            },
            {
                "name": "n8n_Demo",
                "type": "n8n",
                "endpoint": "https://demo-n8n.com/webhook",
                "credentials": {
                    "webhook_id": "demo_webhook_123",
                    "api_key": "demo_api_key_456"
                },
                "active": True,
                "last_sync": None
            },
            {
                "name": "ERP_Demo",
                "type": "erp",
                "endpoint": "https://demo-erp-system.com/api",
                "credentials": {
                    "username": "demo_erp_user",
                    "password": "demo_erp_password",
                    "client": "100"
                },
                "active": True,
                "last_sync": None
            }
        ],
        "settings": {
            "auto_sync_enabled": True,
            "sync_interval_minutes": 60,
            "max_history_entries": 1000,
            "notification_enabled": True
        }
    }
    
    config_path = Path("backend/bi_config.json")
    with open(config_path, 'w', encoding='utf-8') as f:
        json.dump(config, f, indent=2, ensure_ascii=False)
    
    print(f"‚úÖ Configuration BI cr√©√©e : {config_path}")
    return config_path

def create_demo_data():
    """Cr√©e des donn√©es de d√©monstration"""
    print_step(3, "CR√âATION DES DONN√âES DE D√âMONSTRATION")
    
    demo_projects = {
        "projects": [
            {
                "id": "Test1",
                "name": "Maison Test 1",
                "description": "Projet de d√©monstration BIM",
                "created": "2024-01-15T10:00:00Z",
                "status": "active",
                "elements_count": 1247,
                "floor_area": 150.5,
                "volume": 450.0
            },
            {
                "id": "Duplex",
                "name": "Duplex Moderne",
                "description": "Duplex avec analyse BI compl√®te",
                "created": "2024-02-01T14:30:00Z",
                "status": "active",
                "elements_count": 2156,
                "floor_area": 280.0,
                "volume": 840.0
            },
            {
                "id": "WestRiversideHospital",
                "name": "H√¥pital West Riverside",
                "description": "Complexe hospitalier avec int√©gration ERP",
                "created": "2024-01-20T09:15:00Z",
                "status": "active",
                "elements_count": 15420,
                "floor_area": 5200.0,
                "volume": 18600.0
            }
        ]
    }
    
    demo_path = Path("backend/demo_projects.json")
    with open(demo_path, 'w', encoding='utf-8') as f:
        json.dump(demo_projects, f, indent=2, ensure_ascii=False)
    
    print(f"‚úÖ Donn√©es de d√©mo cr√©√©es : {demo_path}")

def create_startup_script():
    """Cr√©e un script de d√©marrage automatique"""
    print_step(4, "CR√âATION DU SCRIPT DE D√âMARRAGE")
    
    startup_script = '''#!/usr/bin/env python3
"""
üöÄ SCRIPT DE D√âMARRAGE AUTOMATIQUE BIMEX BI
Lance le serveur backend avec toutes les fonctionnalit√©s BI
"""

import os
import sys
import subprocess
import time
import webbrowser
from pathlib import Path

def main():
    print("üöÄ D√âMARRAGE DU SYST√àME BIMEX BI")
    print("=" * 50)
    
    # V√©rifier que nous sommes dans le bon r√©pertoire
    if not Path("backend/main.py").exists():
        print("‚ùå Erreur: Lancez ce script depuis la racine du projet")
        sys.exit(1)
    
    # Changer vers le r√©pertoire backend
    os.chdir("backend")
    
    print("üì° D√©marrage du serveur backend...")
    print("üåê URL: http://localhost:8000")
    print("üè† Interface: http://localhost:8000/app/home.html")
    print("üìä Dashboard BI: Cliquez sur le bouton BI flottant")
    print("\\n‚è≥ D√©marrage en cours...")
    
    # Attendre un peu puis ouvrir le navigateur
    def open_browser():
        time.sleep(3)
        try:
            webbrowser.open("http://localhost:8000/app/home.html")
            print("\\nüåê Navigateur ouvert automatiquement")
        except:
            print("\\nüåê Ouvrez manuellement: http://localhost:8000/app/home.html")
    
    import threading
    browser_thread = threading.Thread(target=open_browser)
    browser_thread.daemon = True
    browser_thread.start()
    
    # D√©marrer le serveur
    try:
        subprocess.run([sys.executable, "main.py"], check=True)
    except KeyboardInterrupt:
        print("\\nüõë Arr√™t du serveur...")
    except Exception as e:
        print(f"\\n‚ùå Erreur: {e}")

if __name__ == "__main__":
    main()
'''
    
    script_path = Path("start_bimex_bi.py")
    with open(script_path, 'w', encoding='utf-8') as f:
        f.write(startup_script)
    
    # Rendre le script ex√©cutable sur Unix
    if os.name != 'nt':
        os.chmod(script_path, 0o755)
    
    print(f"‚úÖ Script de d√©marrage cr√©√© : {script_path}")

def create_user_guide():
    """Cr√©e un guide utilisateur complet"""
    print_step(5, "CR√âATION DU GUIDE UTILISATEUR")
    
    guide = '''# üöÄ GUIDE UTILISATEUR - SYST√àME BI BIMEX

## üéØ D√âMARRAGE RAPIDE

### 1. Lancer le syst√®me
```bash
python start_bimex_bi.py
```

### 2. Acc√©der √† l'interface
- **URL principale**: http://localhost:8000/app/home.html
- **Cliquez sur le bouton BI flottant** (coin sup√©rieur droit)

## üìä UTILISATION DU DASHBOARD BI

### Widgets Disponibles
- üü° **Power BI**: Export automatique vers Power BI
- üîµ **Tableau**: Publication vers Tableau Server  
- üî¥ **n8n**: Workflows automatis√©s
- üü¢ **ERP**: Synchronisation avec syst√®mes ERP

### Actions Rapides
- **Export Multi-Plateformes**: Exporte vers toutes les plateformes
- **Historique**: Voir toutes les synchronisations
- **Statut BI**: V√©rifier l'√©tat des connecteurs

## üîß CONFIGURATION

### Modifier les connecteurs
√âditez le fichier `backend/bi_config.json`:

```json
{
  "connectors": [
    {
      "name": "PowerBI_Production",
      "type": "powerbi",
      "endpoint": "https://api.powerbi.com/v1.0/myorg/datasets",
      "credentials": {
        "client_id": "VOTRE_CLIENT_ID",
        "client_secret": "VOTRE_CLIENT_SECRET",
        "tenant_id": "VOTRE_TENANT_ID"
      },
      "active": true
    }
  ]
}
```

### Projets support√©s
Le syst√®me d√©tecte automatiquement vos projets BIM dans:
- `xeokit-bim-viewer/app/data/projects/`

## üöÄ FONCTIONNALIT√âS AVANC√âES

### APIs Disponibles
- `GET /bi/status` - Statut des connecteurs
- `POST /bi/export-powerbi` - Export Power BI
- `POST /bi/export-tableau` - Export Tableau
- `POST /bi/trigger-n8n-workflow` - Workflows n8n
- `POST /bi/sync-erp` - Sync ERP
- `GET /bi/sync-history` - Historique

### Workflows Automatis√©s
Cr√©ez des workflows n8n pour:
- Export quotidien automatique
- Alertes sur anomalies
- Synchronisation ERP temps r√©el

## üõ†Ô∏è D√âPANNAGE

### Probl√®mes courants
1. **Port 8000 occup√©**: Changez le port dans `main.py`
2. **Erreur de connecteur**: V√©rifiez `bi_config.json`
3. **Projet non trouv√©**: V√©rifiez le nom du projet

### Logs
Les logs sont affich√©s dans la console du serveur.

## üìû SUPPORT
Pour toute question, consultez les logs du serveur ou v√©rifiez la configuration.
'''
    
    guide_path = Path("GUIDE_BI_UTILISATEUR.md")
    with open(guide_path, 'w', encoding='utf-8') as f:
        f.write(guide)
    
    print(f"‚úÖ Guide utilisateur cr√©√© : {guide_path}")

def main():
    """Fonction principale de configuration"""
    print("üöÄ CONFIGURATION AUTOMATIQUE DU SYST√àME BI BIMEX")
    print("=" * 60)
    print("Ce script va configurer automatiquement tout le syst√®me BI")
    print("Dur√©e estim√©e: 2-3 minutes")
    
    try:
        install_requirements()
        create_bi_config()
        create_demo_data()
        create_startup_script()
        create_user_guide()
        
        print("\n" + "=" * 60)
        print("üéâ CONFIGURATION TERMIN√âE AVEC SUCC√àS !")
        print("=" * 60)
        print("\nüìã PROCHAINES √âTAPES:")
        print("1. Lancez le syst√®me: python start_bimex_bi.py")
        print("2. Ouvrez: http://localhost:8000/app/home.html")
        print("3. Cliquez sur le bouton BI flottant")
        print("4. Testez les fonctionnalit√©s BI")
        print("\nüìñ Consultez GUIDE_BI_UTILISATEUR.md pour plus d'infos")
        
    except Exception as e:
        print(f"\n‚ùå ERREUR LORS DE LA CONFIGURATION: {e}")
        sys.exit(1)

if __name__ == "__main__":
    main()
