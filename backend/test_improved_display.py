"""
Test des am√©liorations d'affichage pour la classification et l'analyse
"""

import requests
import json
import logging

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def test_classification_display():
    """Test de l'affichage am√©lior√© de la classification"""
    logger.info("üß™ Test de l'affichage de classification am√©lior√©")
    
    try:
        response = requests.get("http://localhost:8000/classify-building-project/basic2", timeout=15)
        
        if response.status_code == 200:
            data = response.json()
            
            logger.info("‚úÖ R√©ponse de classification re√ßue")
            logger.info(f"üìä Cl√©s disponibles: {list(data.keys())}")
            
            # V√©rifier la structure de classification
            if 'classification' in data:
                classification = data['classification']
                logger.info(f"üè¢ Classification: {classification}")
                
                if 'building_type' in classification:
                    logger.info(f"   Type: {classification['building_type']}")
                if 'confidence' in classification:
                    logger.info(f"   Confiance: {classification['confidence'] * 100:.1f}%")
                if 'classification_method' in classification:
                    logger.info(f"   M√©thode: {classification['classification_method']}")
                
                return True
            else:
                logger.warning("‚ö†Ô∏è Pas de donn√©es de classification dans la r√©ponse")
                return False
        else:
            logger.error(f"‚ùå Status HTTP: {response.status_code}")
            return False
            
    except Exception as e:
        logger.error(f"‚ùå Erreur: {e}")
        return False

def test_comprehensive_analysis_display():
    """Test de l'affichage am√©lior√© de l'analyse compl√®te"""
    logger.info("üß™ Test de l'affichage d'analyse compl√®te am√©lior√©")
    
    try:
        response = requests.get("http://localhost:8000/analyze-comprehensive-project/basic2", timeout=30)
        
        if response.status_code == 200:
            data = response.json()
            
            logger.info("‚úÖ R√©ponse d'analyse compl√®te re√ßue")
            
            if 'analysis' in data and 'analysis_results' in data['analysis']:
                results = data['analysis']['analysis_results']
                
                # Test des anomalies
                if 'anomalies' in results:
                    anomalies = results['anomalies']
                    logger.info(f"üö® Anomalies: {anomalies.get('status')}")
                    if anomalies.get('data'):
                        total = anomalies['data'].get('total_anomalies', 0)
                        logger.info(f"   Total: {total} anomalies")
                
                # Test de la classification
                if 'classification' in results:
                    classification = results['classification']
                    logger.info(f"üè¢ Classification: {classification.get('status')}")
                    if classification.get('data'):
                        building_type = classification['data'].get('building_type')
                        confidence = classification['data'].get('confidence', 0) * 100
                        logger.info(f"   Type: {building_type} ({confidence:.1f}%)")
                
                # Test PMR
                if 'pmr' in results:
                    pmr = results['pmr']
                    logger.info(f"‚ôø PMR: {pmr.get('status')}")
                    if pmr.get('data'):
                        total_checks = pmr['data'].get('total_checks', 0)
                        logger.info(f"   V√©rifications: {total_checks}")
                
                return True
            else:
                logger.warning("‚ö†Ô∏è Structure d'analyse inattendue")
                return False
        else:
            logger.error(f"‚ùå Status HTTP: {response.status_code}")
            return False
            
    except Exception as e:
        logger.error(f"‚ùå Erreur: {e}")
        return False

def test_frontend_pages():
    """Test des pages frontend"""
    logger.info("üß™ Test des pages frontend")
    
    pages_to_test = [
        ("Page d'analyse", "http://localhost:8000/analysis?project=basic2&auto=true&file_detected=true&step=detailed"),
        ("Page d'accueil viewer", "http://localhost:8081/xeokit-bim-viewer/app/home.html"),
    ]
    
    results = {}
    
    for page_name, url in pages_to_test:
        try:
            response = requests.get(url, timeout=10)
            if response.status_code == 200:
                content = response.text
                
                # V√©rifications sp√©cifiques
                checks = []
                if "analysis" in url:
                    checks = [
                        ("displayClassificationResults", "Fonction d'affichage classification"),
                        ("displayAnalysisResults", "Fonction d'affichage analyse"),
                        ("metric-card", "Cartes de m√©triques"),
                        ("Classification du B√¢timent", "Section classification"),
                    ]
                else:
                    checks = [
                        ("xeokit", "R√©f√©rence XeoKit"),
                        ("basic2", "Projet basic2"),
                    ]
                
                page_ok = True
                for check, description in checks:
                    if check.lower() in content.lower():
                        logger.info(f"   ‚úÖ {description}")
                    else:
                        logger.warning(f"   ‚ö†Ô∏è {description} - Non trouv√©")
                        page_ok = False
                
                results[page_name] = page_ok
                logger.info(f"{'‚úÖ' if page_ok else '‚ö†Ô∏è'} {page_name}: {'OK' if page_ok else 'Probl√®mes d√©tect√©s'}")
            else:
                logger.error(f"‚ùå {page_name}: Status {response.status_code}")
                results[page_name] = False
                
        except Exception as e:
            logger.error(f"‚ùå {page_name}: Erreur {e}")
            results[page_name] = False
    
    return results

def main():
    """Test principal des am√©liorations d'affichage"""
    logger.info("üöÄ Tests des am√©liorations d'affichage")
    
    tests = [
        ("Classification am√©lior√©e", test_classification_display),
        ("Analyse compl√®te am√©lior√©e", test_comprehensive_analysis_display),
        ("Pages frontend", test_frontend_pages)
    ]
    
    results = {}
    
    for test_name, test_func in tests:
        logger.info(f"\n{'='*50}")
        logger.info(f"TEST: {test_name.upper()}")
        logger.info(f"{'='*50}")
        
        result = test_func()
        results[test_name] = result
        
        if result is True:
            logger.info(f"‚úÖ {test_name}: SUCC√àS")
        elif isinstance(result, dict):
            success_count = sum(1 for r in result.values() if r)
            total_count = len(result)
            logger.info(f"üìä {test_name}: {success_count}/{total_count} r√©ussis")
            results[test_name] = success_count == total_count
        else:
            logger.error(f"‚ùå {test_name}: √âCHEC")
    
    # R√©sum√© final
    logger.info(f"\n{'='*50}")
    logger.info("üìä R√âSUM√â DES AM√âLIORATIONS")
    logger.info(f"{'='*50}")
    
    success_count = sum(1 for r in results.values() if r)
    total_count = len(results)
    
    logger.info(f"‚úÖ Tests r√©ussis: {success_count}/{total_count}")
    
    if success_count == total_count:
        logger.info("üéâ TOUTES LES AM√âLIORATIONS FONCTIONNENT!")
        logger.info("üîó URLs de test:")
        logger.info("   - Classification: http://localhost:8000/classify-building-project/basic2")
        logger.info("   - Analyse compl√®te: http://localhost:8000/analyze-comprehensive-project/basic2")
        logger.info("   - Interface: http://localhost:8000/analysis?project=basic2&auto=true&file_detected=true&step=detailed")
    else:
        logger.warning(f"‚ö†Ô∏è {total_count - success_count} am√©lioration(s) ont des probl√®mes")
    
    return results

if __name__ == "__main__":
    main()
