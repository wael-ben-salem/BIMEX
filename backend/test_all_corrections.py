"""
Test de toutes les corrections appliqu√©es :
1. Cache intelligent pour tous les boutons
2. Donn√©es PMR coh√©rentes
3. Pagination des anomalies
"""

import requests
import json
import time
import logging

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def test_cache_all_buttons():
    """Test du cache pour tous les boutons"""
    logger.info("üß™ Test du cache pour tous les boutons")
    
    buttons_tests = [
        ("Analyse compl√®te", "http://localhost:8000/analyze-comprehensive-project/basic2"),
        ("Classification", "http://localhost:8000/classify-building-project/basic2"),
        ("PMR", "http://localhost:8000/analyze-pmr-project/basic2"),
        ("Anomalies", "http://localhost:8000/detect-anomalies-project/basic2"),
    ]
    
    cache_results = {}
    
    for button_name, url in buttons_tests:
        try:
            logger.info(f"üìä Test {button_name}...")
            
            # Premier appel (sans cache)
            start_time = time.time()
            response1 = requests.get(url, timeout=30)
            first_time = time.time() - start_time
            
            # Deuxi√®me appel (potentiel cache backend)
            start_time = time.time()
            response2 = requests.get(url, timeout=30)
            second_time = time.time() - start_time
            
            if response1.status_code == 200 and response2.status_code == 200:
                improvement = first_time / second_time if second_time > 0 else 1
                
                logger.info(f"   ‚è±Ô∏è Premier appel: {first_time:.2f}s")
                logger.info(f"   ‚ö° Deuxi√®me appel: {second_time:.2f}s")
                logger.info(f"   üöÄ Am√©lioration: {improvement:.1f}x")
                
                cache_results[button_name] = {
                    "success": True,
                    "first_time": first_time,
                    "second_time": second_time,
                    "improvement": improvement
                }
            else:
                logger.error(f"   ‚ùå Erreur HTTP: {response1.status_code}, {response2.status_code}")
                cache_results[button_name] = {"success": False, "error": "HTTP error"}
                
        except Exception as e:
            logger.error(f"   ‚ùå Erreur: {e}")
            cache_results[button_name] = {"success": False, "error": str(e)}
    
    return cache_results

def test_pmr_data_consistency():
    """Test de coh√©rence des donn√©es PMR"""
    logger.info("üß™ Test de coh√©rence des donn√©es PMR")
    
    try:
        # Analyse PMR directe
        logger.info("üìä R√©cup√©ration analyse PMR directe...")
        response_pmr = requests.get("http://localhost:8000/analyze-pmr-project/basic2", timeout=20)
        
        if response_pmr.status_code != 200:
            logger.error(f"‚ùå Erreur PMR directe: {response_pmr.status_code}")
            return False
        
        pmr_direct = response_pmr.json()
        pmr_summary = pmr_direct.get('analysis', {}).get('summary', {})
        
        logger.info(f"   üìä PMR Direct - Total: {pmr_summary.get('total_checks')}")
        logger.info(f"   ‚úÖ Conformes: {pmr_summary.get('compliant_checks')}")
        logger.info(f"   ‚ùå Non conformes: {pmr_summary.get('non_compliant_checks')}")
        logger.info(f"   ‚ö†Ô∏è Attention: {pmr_summary.get('attention_checks')}")
        logger.info(f"   üìà Conformit√©: {pmr_summary.get('compliance_percentage'):.1f}%")
        
        # Analyse compl√®te
        logger.info("üìä R√©cup√©ration analyse compl√®te...")
        response_complete = requests.get("http://localhost:8000/analyze-comprehensive-project/basic2", timeout=30)
        
        if response_complete.status_code != 200:
            logger.error(f"‚ùå Erreur analyse compl√®te: {response_complete.status_code}")
            return False
        
        complete_data = response_complete.json()
        pmr_complete = complete_data.get('analysis', {}).get('analysis_results', {}).get('pmr', {})
        
        if pmr_complete.get('status') == 'success':
            pmr_complete_summary = pmr_complete.get('data', {}).get('summary', {})
            
            logger.info(f"   üìä PMR Compl√®te - Total: {pmr_complete_summary.get('total_checks')}")
            logger.info(f"   ‚úÖ Conformes: {pmr_complete_summary.get('compliant_checks')}")
            logger.info(f"   ‚ùå Non conformes: {pmr_complete_summary.get('non_compliant_checks')}")
            logger.info(f"   ‚ö†Ô∏è Attention: {pmr_complete_summary.get('attention_checks')}")
            logger.info(f"   üìà Conformit√©: {pmr_complete_summary.get('compliance_percentage'):.1f}%")
            
            # V√©rifier la coh√©rence
            if (pmr_summary.get('total_checks') == pmr_complete_summary.get('total_checks') and
                pmr_summary.get('compliance_percentage') == pmr_complete_summary.get('compliance_percentage')):
                logger.info("‚úÖ Donn√©es PMR coh√©rentes entre les deux analyses")
                return True
            else:
                logger.error("‚ùå Incoh√©rence d√©tect√©e entre les analyses PMR")
                return False
        else:
            logger.error("‚ùå PMR non disponible dans l'analyse compl√®te")
            return False
            
    except Exception as e:
        logger.error(f"‚ùå Erreur test PMR: {e}")
        return False

def test_anomalies_pagination():
    """Test de la pagination des anomalies"""
    logger.info("üß™ Test de la pagination des anomalies")
    
    try:
        logger.info("üìä R√©cup√©ration des anomalies...")
        response = requests.get("http://localhost:8000/detect-anomalies-project/basic2", timeout=20)
        
        if response.status_code != 200:
            logger.error(f"‚ùå Erreur anomalies: {response.status_code}")
            return False
        
        anomalies_data = response.json()
        anomalies = anomalies_data.get('anomalies', [])
        summary = anomalies_data.get('summary', {})
        
        total_anomalies = len(anomalies)
        logger.info(f"üìä Total anomalies: {total_anomalies}")
        logger.info(f"üö® Critiques: {summary.get('by_severity', {}).get('critical', 0)}")
        logger.info(f"‚ö†Ô∏è √âlev√©es: {summary.get('by_severity', {}).get('high', 0)}")
        logger.info(f"üìã Moyennes: {summary.get('by_severity', {}).get('medium', 0)}")
        logger.info(f"üìù Faibles: {summary.get('by_severity', {}).get('low', 0)}")
        
        if total_anomalies > 10:
            logger.info("‚úÖ Pagination n√©cessaire - Plus de 10 anomalies d√©tect√©es")
            logger.info(f"   üìÑ Affichage par d√©faut: 10 premi√®res anomalies")
            logger.info(f"   üìã Bouton 'Tout afficher': {total_anomalies} anomalies")
            logger.info(f"   üîÑ Options: 5, 10, 20, ou toutes")
            return True
        elif total_anomalies > 0:
            logger.info(f"‚úÖ Anomalies d√©tect√©es: {total_anomalies} (pas de pagination n√©cessaire)")
            return True
        else:
            logger.info("‚úÖ Aucune anomalie d√©tect√©e")
            return True
            
    except Exception as e:
        logger.error(f"‚ùå Erreur test anomalies: {e}")
        return False

def test_frontend_integration():
    """Test d'int√©gration frontend"""
    logger.info("üß™ Test d'int√©gration frontend")
    
    test_url = "http://localhost:8000/analysis?project=basic2&auto=true&file_detected=true&step=detailed"
    
    try:
        response = requests.get(test_url, timeout=10)
        if response.status_code == 200:
            logger.info("‚úÖ Page d'analyse accessible")
            logger.info(f"   üîó URL: {test_url}")
            
            # V√©rifier la pr√©sence des √©l√©ments cl√©s dans le HTML
            html_content = response.text
            
            checks = [
                ("Cache button", "üßπ Effacer le cache" in html_content),
                ("Anomalies container", "anomaliesContainer" in html_content),
                ("PMR section", "Analyse PMR" in html_content),
                ("Classification section", "Classifier le b√¢timent" in html_content),
                ("Assistant section", "assistant" in html_content.lower())
            ]
            
            for check_name, check_result in checks:
                if check_result:
                    logger.info(f"   ‚úÖ {check_name}: Pr√©sent")
                else:
                    logger.warning(f"   ‚ö†Ô∏è {check_name}: Non trouv√©")
            
            return True
        else:
            logger.error(f"‚ùå Page non accessible: {response.status_code}")
            return False
            
    except Exception as e:
        logger.error(f"‚ùå Erreur test frontend: {e}")
        return False

def main():
    """Test principal de toutes les corrections"""
    logger.info("üöÄ Tests de Toutes les Corrections Appliqu√©es")
    
    results = {}
    
    # Test 1: Cache pour tous les boutons
    logger.info(f"\n{'='*60}")
    logger.info("TEST 1: CACHE INTELLIGENT TOUS BOUTONS")
    logger.info(f"{'='*60}")
    cache_results = test_cache_all_buttons()
    results['cache'] = cache_results
    
    # Test 2: Coh√©rence donn√©es PMR
    logger.info(f"\n{'='*60}")
    logger.info("TEST 2: COH√âRENCE DONN√âES PMR")
    logger.info(f"{'='*60}")
    pmr_consistent = test_pmr_data_consistency()
    results['pmr_consistency'] = pmr_consistent
    
    # Test 3: Pagination anomalies
    logger.info(f"\n{'='*60}")
    logger.info("TEST 3: PAGINATION ANOMALIES")
    logger.info(f"{'='*60}")
    anomalies_pagination = test_anomalies_pagination()
    results['anomalies_pagination'] = anomalies_pagination
    
    # Test 4: Int√©gration frontend
    logger.info(f"\n{'='*60}")
    logger.info("TEST 4: INT√âGRATION FRONTEND")
    logger.info(f"{'='*60}")
    frontend_ok = test_frontend_integration()
    results['frontend'] = frontend_ok
    
    # R√©sum√© final
    logger.info(f"\n{'='*60}")
    logger.info("üìä R√âSUM√â DES CORRECTIONS")
    logger.info(f"{'='*60}")
    
    # Correction 1: Cache
    if cache_results:
        successful_cache = sum(1 for r in cache_results.values() if r.get('success'))
        total_cache = len(cache_results)
        logger.info(f"‚úÖ CORRECTION 1: Cache intelligent - {successful_cache}/{total_cache} boutons")
        
        if successful_cache > 0:
            avg_improvement = sum(r.get('improvement', 1) for r in cache_results.values() if r.get('success')) / successful_cache
            logger.info(f"   üöÄ Am√©lioration moyenne: {avg_improvement:.1f}x plus rapide")
    
    # Correction 2: PMR
    if pmr_consistent:
        logger.info("‚úÖ CORRECTION 2: Donn√©es PMR coh√©rentes")
    else:
        logger.error("‚ùå CORRECTION 2: Incoh√©rence PMR persistante")
    
    # Correction 3: Anomalies
    if anomalies_pagination:
        logger.info("‚úÖ CORRECTION 3: Pagination anomalies op√©rationnelle")
    else:
        logger.error("‚ùå CORRECTION 3: Probl√®me pagination anomalies")
    
    # Correction 4: Frontend
    if frontend_ok:
        logger.info("‚úÖ CORRECTION 4: Int√©gration frontend r√©ussie")
    else:
        logger.error("‚ùå CORRECTION 4: Probl√®me int√©gration frontend")
    
    # Instructions d'utilisation
    logger.info(f"\n{'='*60}")
    logger.info("üí° INSTRUCTIONS D'UTILISATION")
    logger.info(f"{'='*60}")
    
    logger.info("üéØ Pour tester toutes les corrections:")
    logger.info("   1. Ouvrir: http://localhost:8000/analysis?project=basic2&auto=true&file_detected=true&step=detailed")
    logger.info("")
    logger.info("üöÄ Test du cache:")
    logger.info("   2. Cliquer 'üîç Analyser le fichier' - Noter le temps (~15s)")
    logger.info("   3. Re-cliquer 'üîç Analyser le fichier' - Devrait √™tre instantan√© ‚ö°")
    logger.info("   4. Cliquer 'üè¢ Classifier le b√¢timent' - Instantan√© ‚ö°")
    logger.info("   5. Cliquer '‚ôø Analyse PMR' - Instantan√© ‚ö°")
    logger.info("   6. Cliquer 'üö® D√©tecter les anomalies' - Instantan√© ‚ö°")
    logger.info("   7. Cliquer 'ü§ñ Charger l'assistant IA' - Instantan√© ‚ö°")
    logger.info("")
    logger.info("üè• Test coh√©rence PMR:")
    logger.info("   8. V√©rifier que PMR dans 'Analyser le fichier' = PMR direct")
    logger.info("   9. Donn√©es attendues: 61.5%, 8 conformes, 2 non conformes, 2 attention")
    logger.info("")
    logger.info("üìã Test pagination anomalies:")
    logger.info("   10. Cliquer 'üö® D√©tecter les anomalies'")
    logger.info("   11. Voir 'Affichage: 10 sur X anomalies'")
    logger.info("   12. Cliquer 'Afficher toutes les anomalies'")
    logger.info("   13. Tester le s√©lecteur '5/10/20/Tout afficher'")
    logger.info("")
    logger.info("üßπ Gestion du cache:")
    logger.info("   14. Cliquer 'üßπ Effacer le cache' pour r√©initialiser")
    logger.info("   15. Ou attendre 10 minutes (expiration automatique)")
    
    logger.info("üéâ Tests termin√©s!")
    return results

if __name__ == "__main__":
    main()
